"""1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()),
который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц: см. в методичке.

Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода add() для реализации операции сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы
складываем с первым элементом первой строки второй матрицы и т.д."""


class Matrix:
    _ll: list

    def __init__(self, i_ll):
        self._ll = i_ll

    # перегружаем метод преобразования объекта в str
    def __str__(self):
        l_str = ""
        if self._ll is None:
            return "Объект пустой"
        for row in self._ll:
            for elem in row:
                l_str = l_str + " " + str(elem)
            l_str = l_str + "\n"
        return l_str

    # перегружаем метод +, реализуем сложение матриц
    def __add__(self, other):
        l_resMatrix = []
        for i_row in range(len(self._ll)):
            l_resMatrix.append([])
            for i_col in range(len(self._ll[i_row])):
                l_resMatrix[i_row].append(self[i_row][i_col] + other[i_row][i_col])
        return Matrix(l_resMatrix)

    # перегружаем метод [], чтобы работала стр.33
    def __getitem__(self, index):
        return self._ll[index]


g_m1 = Matrix([[1, 3, 0, 2], [4, 1, 3, 1]])
g_m2 = Matrix([[4, -3, 2, -2], [-3, 0, 4, 0]])
g_m3 = g_m1 + g_m2

print(g_m1)
print(g_m2)
print(g_m3)
